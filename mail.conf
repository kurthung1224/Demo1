input{
  file {
    path => "/tmp/2010/12/*"
    start_position => "beginning"
    codec => plain {
      charset => "ISO-8859-1"
    }
  }

  file {
    path => "/tmp/2011/*/*"
    start_position => "beginning"
    codec => plain {
      charset => "ISO-8859-1"
    }
  }
}

filter {

  if    [message] == ""
     or [message] !~ /(\w+)/
     or [message] =~ /^(\t|\s)(.*)/
     or [message] =~ /^(\_+|\*+)/
     or [message] =~ /^(To:)(.*)/
     or [message] =~ /^(Message-I)(D|d)(.*)/
     or [message] =~ /^(Mime-Version)(.*)/
     or [message] =~ /^(Content)(.*)/
     or [message] =~ /^(X-)(.*)/
     or [message] =~ /^(Ai-Ixe)(.*)/
     or [message] =~ /^(Delivered-To)(.*)/
     or [message] =~ /^(Received:)\s*\(.*\)(.*)/
     or [message] =~ /^(MIME-Version)(.*)/
     or [message] =~ /^(List-Id)(.*)/
     or [message] =~ /^(Reply-To:)(.*)/
     or [message] =~ /^(Return-Path)(.*)/
     or [message] =~ /^(ID:)(.*)/
     or [message] =~ /^(Bcc:)(.*)/
  { drop{} }

  if [message] !~ /^(From:)(.*)/ and [message] =~ /\s*(^\<)|(\>$)/{
    drop{}
  }

  grok {
    break_on_match => false
    match => [ "message", "(From:)\s*%{DATA:sender_name}\s*(\<)*%{USERNAME:sender_ID}\@%{HOSTNAME:sender_Hostname}(\>)*" ]
    match => [ "message", "(Received:)\s*(from)\s*%{USERNAME:username}\s*\(%{USERNAME:sender_ID}*\s*\[%{HOSTNAME:scr_IP}\]\)" ]
    match => [ "message", "(Subject:)\s*%{GREEDYDATA:subject}" ]
    match => [ "message", "(Date:)\s*%{DAY:day},\s*%{MONTHDAY:monthday}\s*%{MONTH:month}\s*%{YEAR:year}\s*%{HOUR:hour}:%{MINUTE:minute}:%{SECOND:second}\s*%{ISO8601_TIMEZONE}"]
  }

  if [scr_IP] =~ /10\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/ or [scr_IP] == "127.0.0.1" {
    mutate { add_tag => "_unused"}
  }

  geoip {
    source=> scr_IP
    target => "geoip"
    database =>"/opt/logstash-1.4.2/vendor/geoip/GeoLiteCity.dat"
    add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
    add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
  }
}

output{
  if "_unused" not in [tags] {
    
    stdout{}

    elasticsearch{
      host => "192.168.70.101"
      codec => "json"
      workers => 1
      protocol => "http"
      cluster => "elasticsearch"
    }

    if [subject] {
      file{
        codec => plain {
          charset => "ISO-8859-1"
        }
        message_format => "%{subject}"
        path => "/tmp/logstash-subject.txt"
      }
    }

    if "_grokparsefailure" in [tags] {
      file {
        codec => {
          charset => "ISO-8859-1"
        }
        message_format =>"%{message}"
        path => "/tmp/logstash-content.txt"
      }  
    }
  }
}
